# -*- coding: utf-8 -*-
# -----------------------------------------------------------------------------
# Copyright 2018 by AnnealPy Authors, see AUTHORS for more details.
#
# Distributed under the terms of the BSD 3-Clause license.
#
# The full license is in the file LICENCE, distributed with this software.
# -----------------------------------------------------------------------------
from itertools import chain

from enaml.core.api import Include
from enaml.layout.api import vbox, hbox, spacer, align, grid
from enaml.widgets.api import (DockItem, Container, PushButton, FileDialogEx,
                               PushButton, Menu, Action, Dialog, ObjectCombo,
                               MultilineField, ToolButton)

from .process import AnnealerProcess
from .steps import STEPS, create_widget

enamldef StepSelectionDialog(Dialog): dial:
    """A dialog to select a step type.

    """
    attr step << comb.selected

    Container:

        constraints = [vbox(hbox(comb, fld), hbox(spacer, c_btn, o_btn)),
                       align('top', comb, fld)]

        ObjectCombo: comb:
            items = list(STEPS)
        MultilineField: fld:
            read_only = True
            text << (STEPS[comb.selected].__doc__
                     if comb.selected in STEPS else '')

        PushButton: c_btn:
            text = 'Cancel'
            clicked:: dial.reject()
        PushButton: o_btn:
            text = 'Ok'
            clicked:: dial.accept()


enamldef StepEditionMenu(Menu):
    """A menu to add-move-remove a step.

    """
    #: Reference to the process
    attr process

    #: Index of the step to which this button is linked.
    attr index

    Menu:
        title = 'Add'
        Action:
            text = 'Add before'
            triggered::
                dial = StepSelectionDialog()
                dial.exec_()
                if dial.result:
                    process.add_step(index, STEPS[dial.step]())
        Action:
            text = 'Add after'
            triggered::
                dial = StepSelectionDialog()
                dial.exec_()
                if dial.result:
                    process.add_step(index+1, STEPS[dial.step]())
    Menu:
        title = 'Move'
        Action:
            text = 'Move up'
            triggered::
                process.move_step(index, index-1)
        Action:
            text = 'Move down'
            triggered::
                process.move_step(index, index+1)
    Action:
        text = 'Delete'
        triggered::
            process.remove_step(index)


enamldef StepEditionButton(ToolButton):
    """A button displaying a menu to add-move-remove a step.

    """
    #: Reference to the process
    attr process

    #: Index of the step to which this button is linked.
    attr index

    text = '>'

    clicked ::
        menu = StepEditionMenu(self, process=process, index=index)
        menu.popup()


enamldef AddFirstStepButton(PushButton):
    """Button used to add the first step to a process.

    """
    attr process

    text = 'Add first step'
    clicked ::
        dial = StepSelectionDialog()
        dial.exec_()
        if dial.result:
            process.add_step(None, STEPS[dial.step]())


def create_steps_widgets(process, steps):
    """Create a PushButton and a custom widget per step.

    """
    if steps:
        return list(chain(*[(StepEditionButton(process=process, index=i),
                             create_widget(s))
                        for i, s in enumerate(steps)]))
    else:
        return [AddFirstStepButton(process=process)]


enamldef ProcessDockItem(DockItem):
    """Dock item allowing to edit a process.

    """
    attr process

    closable = False

    func save():
        if app_state.process.path:
            app.state.process.save()
            status_bar = self.parent.status_bar()
            status_bar.show_message('Saved current process')
        else:
            save_as()

    func save_as():
        path = FileDialogEx.get_save_file_name(self, name_filters=['*.json'])
        if path:
            if not path.endswith('.json'):
                path += '.json'
            process.save(path)
            status_bar = self.parent.status_bar()
            status_bar.show_message('Saved current process to {}'.format(path))

    func load():
        path = FileDialogEx.get_open_file_name(self, name_filters=['*.json'])
        if path:
            self.process = AnnealerProcess.load(path)
            status_bar = self.parent.status_bar()
            status_bar.show_message('Loaded process from {}'.format(path))

    Container:

        layout_constraints => ():
            if process.steps:
                buttons = self.widgets()[:-2:2]
                steps = self.widgets()[1:-2:2]
                args = [hbox(b, s) for b, s in zip(buttons, steps)]
                args += [spacer,
                         hbox(save_btn, save_as_btn, spacer, load_btn)]
                return [vbox(*args)] + [align('top', b, s)
                                        for b, s in zip(buttons, steps)]
            else:
                return [vbox(self.widgets()[0], spacer,
                             hbox(save_btn, save_as_btn, spacer, load_btn))]

        Include:
            objects << create_steps_widgets(process, process.steps)

        PushButton: save_btn:
            text = 'Save'
            clicked:: save()
        PushButton: save_as_btn:
            text = 'Save as'
            clicked:: save_as()
        PushButton: load_btn:
            text = 'Load'
            clicked:: load()
